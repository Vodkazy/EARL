import jsonimport urllib2import sysreload(sys)sys.setdefaultencoding('utf8')def textMatch(question, pagerankflag=False):    req = urllib2.Request('http://localhost:4999/processQuery')    req.add_header('Content-Type', 'application/json')    inputjson = {'nlquery': question, 'pagerankflag': pagerankflag}    response = urllib2.urlopen(req, json.dumps(inputjson))    response = json.loads(response.read())    return responseif __name__ == '__main__':    f = open('/home/vodka/Desktop/Acc_EARL', 'w')    # question = str(sys.argv[1])    ff = open('../data/lcquad.json')    entity_correct = 0    entity_wrong = 0    relation_correct = 0    relation_wrong = 0    questions = json.load(ff)    ff.close()    # questions = sorted(questions.iteritems(), key=lambda x: x[0], reverse=False)    for _index, info in enumerate(questions):        print "Now running the No." + str(_index) + " question..."        question = info['question']        f.write(question + "\n")        final_res = textMatch(question)        # # Judge whether to rerun the pipeline depending on the flag of final_res['rejudge']        # if (final_res['rejudge'] == True):        #     # print "Rejudge the type of some ontologies..."        #     for _index, change_type_flag in final_res['correct-list'].iteritems():        #         if change_type_flag == True:        #             if er_predict_result[_index]['class'] == 'entity':        #                 er_predict_result[_index]['class'] = 'relation'        #             elif er_predict_result[_index]['class'] == 'relation':        #                 er_predict_result[_index]['class'] = 'entity'        #     # Init and rerun        #     initAllParameters()        #     matched_chunks = t.textMatch(er_predict_result)        #     topk_res = j.jointLink(matched_chunks)        #     final_res = r.reRank(topk_res)        f.write(str(final_res) + "\n")        # print final_res        for entity in info['entity mapping']:            flag = False            entity_label = entity['label']            entity_uri = entity['uri']            for _i, item in enumerate(final_res['chunktext']):                if entity_label == item['chunk']:                    flag = True                    if entity_uri == final_res['rerankedlists'][unicode(_i)][0][1]:                        entity_correct += 1                        break                    else:                        entity_wrong += 1                        break            if flag == True:                continue            else:                entity_wrong += 1                continue        for relation in info['predicate mapping']:            flag = False            relation_label = relation['label']            relation_uri = relation['uri']            for _i, item in enumerate(final_res['chunktext']):                if relation_label == item['chunk']:                    flag = True                    if relation_uri == final_res['rerankedlists'][unicode(_i)][0][1]:                        relation_correct += 1                        break                    else:                        relation_wrong += 1                        break            if flag == True:                continue            else:                relation_wrong += 1                continue        print "entity_correct:" + str(entity_correct) + ";entity_wrong:" + str(            entity_wrong) + ";relation_correct:" + str(relation_correct) + ";relation_wrong:" + str(            relation_wrong) + "\n"        f.write("No. " + str(_index) + " question. Entity accuracy is %.6f \n" % (            float(entity_correct) / (float(entity_wrong) + float(entity_correct))))        f.write("No. " + str(_index) + " question. Relation accuracy is %.6f \n" % (            float(relation_correct) / (float(relation_wrong) + float(relation_correct))))        f.write("\n")        f.flush()    f.close()